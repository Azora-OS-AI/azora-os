// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Company {
  id          String       @id @default(cuid())
  name        String
  vatNumber   String?
  accessTier  String       @default("full") // full|limited
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  users       User[]
  jobs        Job[]
  drivers     Driver[]
  employees   Employee[]
  invoices    Invoice[]
  settlements Settlement[]
  subscriptions Subscription[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  role      String   // admin|dispatcher|viewer
  companyId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company  @relation(fields: [companyId], references: [id])
}

model Driver {
  id        String   @id @default(cuid())
  companyId String
  name      String
  phone     String?
  licenseId String?
  createdAt DateTime @default(now())

  company   Company  @relation(fields: [companyId], references: [id])
  jobs      Job[]
}

model Job {
  id          String   @id @default(cuid())
  companyId   String
  title       String
  pickup      String
  dropoff     String
  cargoType   String?
  driverId    String?
  status      String   @default("scheduled") // scheduled|in_progress|completed|canceled
  scheduledAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  company     Company  @relation(fields: [companyId], references: [id])
  driver      Driver?  @relation(fields: [driverId], references: [id])
}

model Invoice {
  id          String   @id @default(cuid())
  companyId   String
  subId       String?
  amountCents Int
  vatCents    Int
  currency    String
  periodStart DateTime
  periodEnd   DateTime
  pdfUrl      String?
  status      String   // issued|paid|void
  createdAt   DateTime @default(now())

  company     Company  @relation(fields: [companyId], references: [id])
  @@index([companyId])
}

model Settlement {
  id            String   @id @default(cuid())
  jobId         String
  ownerCompany  String
  subcontractor String
  amountCents   Int
  feeCents      Int
  status        String   // pending|paid
  createdAt     DateTime @default(now())

  // Relations are optional here if jobs can cross-tenant
  company       Company? @relation(fields: [ownerCompany], references: [id])
  @@index([ownerCompany])
  @@index([subcontractor])
}

model Subscription {
  id               String   @id @default(cuid())
  companyId        String
  plan             String   // starter|growth|enterprise
  status           String   // active|past_due|canceled
  currentPeriodEnd DateTime
  paystackCustomer String
  paystackAuthCode String?
  billingEmail     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  company          Company  @relation(fields: [companyId], references: [id])
  @@index([companyId])
}

model AuditEvent {
  id        String   @id @default(cuid())
  companyId String
  actor     String   // userId or 'system'
  action    String
  details   Json
  createdAt DateTime @default(now())
  @@index([companyId])
  @@index([createdAt])
}

// ============================================================================
// FOUNDER & HR MANAGEMENT
// ============================================================================

model Founder {
  id            String   @id @default(cuid())
  founderId     String   @unique // FOUNDER_001, FOUNDER_002, etc.
  name          String
  email         String   @unique
  roles         String[] // CEO_CTO, CFO_HEAD_OF_SALES, etc.
  titles        String[]
  permissions   String[]
  equity        Float
  votingRights  Boolean  @default(true)
  status        String   @default("active") // active|inactive|on-leave
  joinedDate    DateTime @default(now())
  phoneNumber   String?
  bio           String?
  avatar        String?
  vestingYears  Int      @default(4)
  vestingCliff  Int      @default(1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contracts     Contract[]
  emails        Email[]
  @@index([email])
  @@index([status])
}

model Employee {
  id              String   @id @default(cuid())
  companyId       String
  employeeNumber  String   @unique
  name            String
  email           String   @unique
  phone           String?
  idNumber        String?
  position        String
  department      String
  salary          Int
  startDate       DateTime
  endDate         DateTime?
  status          String   @default("active") // active|on-leave|terminated
  contractType    String   // permanent|contract|intern
  emergencyContact String?
  bankDetails     Json?
  taxNumber       String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  company         Company  @relation(fields: [companyId], references: [id])
  attendance      Attendance[]
  leaveRequests   LeaveRequest[]
  @@index([companyId])
  @@index([email])
  @@index([status])
}

model Attendance {
  id          String   @id @default(cuid())
  employeeId  String
  date        DateTime
  clockIn     DateTime?
  clockOut    DateTime?
  hoursWorked Float    @default(0)
  status      String   @default("present") // present|absent|late|half-day
  notes       String?
  createdAt   DateTime @default(now())

  employee    Employee @relation(fields: [employeeId], references: [id])
  @@index([employeeId])
  @@index([date])
}

model LeaveRequest {
  id          String   @id @default(cuid())
  employeeId  String
  leaveType   String   // annual|sick|maternity|unpaid
  startDate   DateTime
  endDate     DateTime
  days        Int
  reason      String?
  status      String   @default("pending") // pending|approved|rejected
  approvedBy  String?
  approvedAt  DateTime?
  createdAt   DateTime @default(now())

  employee    Employee @relation(fields: [employeeId], references: [id])
  @@index([employeeId])
  @@index([status])
}

model Contract {
  id            String   @id @default(cuid())
  founderId     String
  contractType  String   // founder|employee|nda|ip-assignment
  title         String
  content       String   @db.Text
  pdfUrl        String?
  status        String   @default("draft") // draft|pending|signed|voided
  signedAt      DateTime?
  signedBy      String?
  signatureData String?  @db.Text
  blockchainTx  String?  // blockchain attestation
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  founder       Founder  @relation(fields: [founderId], references: [id])
  @@index([founderId])
  @@index([status])
}

model Email {
  id          String   @id @default(cuid())
  fromId      String
  to          String[]
  cc          String[]
  bcc         String[]
  subject     String
  body        String   @db.Text
  htmlBody    String?  @db.Text
  attachments Json?
  timestamp   DateTime @default(now())
  read        Boolean  @default(false)
  starred     Boolean  @default(false)
  labels      String[]
  threadId    String?
  inReplyTo   String?

  sender      Founder  @relation(fields: [fromId], references: [id])
  @@index([fromId])
  @@index([threadId])
}

// ============================================================================
// RETAIL PARTNER INTEGRATION
// ============================================================================

model RetailStore {
  id            String   @id @default(cuid())
  name          String
  location      String
  storeCode     String   @unique
  storeType     String   // flagship|standard|express
  status        String   @default("active")
  managerId     String?
  openingHours  Json?
  capacity      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  inventory     InventoryItem[]
  customerFlow  CustomerFlow[]
  staffWellness StaffWellness[]
  @@index([storeCode])
  @@index([status])
}

model InventoryItem {
  id                String   @id @default(cuid())
  storeId           String
  sku               String
  productName       String
  category          String
  stock             Int
  minStock          Int
  maxStock          Int
  reorderPoint      Int
  demand            String   // low|medium|high
  suggestedReorder  Int
  lastRestocked     DateTime?
  expiryDate        DateTime?
  price             Int      // in cents
  supplierRef       String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  store             RetailStore @relation(fields: [storeId], references: [id])
  @@index([storeId])
  @@index([sku])
}

model CustomerFlow {
  id                  String   @id @default(cuid())
  storeId             String
  hour                String   // "09:00", "10:00", etc.
  date                DateTime
  predictedCustomers  Int
  actualCustomers     Int?
  confidence          Float?
  weatherConditions   String?
  specialEvents       String?
  createdAt           DateTime @default(now())

  store               RetailStore @relation(fields: [storeId], references: [id])
  @@index([storeId])
  @@index([date])
}

model StaffWellness {
  id            String   @id @default(cuid())
  storeId       String
  staffId       String
  staffName     String
  date          DateTime
  heartRate     Int?
  stressLevel   Int      // 0-100
  fatigueLevel  Int      // 0-100
  alertType     String?  // high-stress|high-fatigue|normal
  recommendation String?
  createdAt     DateTime @default(now())

  store         RetailStore @relation(fields: [storeId], references: [id])
  @@index([storeId])
  @@index([staffId])
  @@index([date])
}

// ============================================================================
// LOGISTICS & TRACKING
// ============================================================================

model Vehicle {
  id              String   @id @default(cuid())
  companyId       String
  registrationNo  String   @unique
  vehicleType     String   // truck|van|bike|drone
  make            String
  model           String
  year            Int
  status          String   @default("active") // active|maintenance|retired
  fuelType        String   // diesel|petrol|electric
  capacity        Float    // in kg or cubic meters
  currentDriverId String?
  gpsDeviceId     String?
  lastService     DateTime?
  nextService     DateTime?
  insuranceExpiry DateTime?
  licenseExpiry   DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  trips           Trip[]
  maintenance     VehicleMaintenance[]
  @@index([companyId])
  @@index([status])
  @@index([registrationNo])
}

model Trip {
  id              String   @id @default(cuid())
  jobId           String
  vehicleId       String
  driverId        String
  origin          String
  destination     String
  distance        Float    // in km
  duration        Int      // in minutes
  status          String   @default("scheduled") // scheduled|in-progress|completed|cancelled
  startTime       DateTime?
  endTime         DateTime?
  fuelCost        Int      // in cents
  trafficLevel    String?  // low|medium|high
  incidents       Int      @default(0)
  riskScore       Float    @default(0)
  riskyBehaviors  String[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  vehicle         Vehicle  @relation(fields: [vehicleId], references: [id])
  @@index([jobId])
  @@index([vehicleId])
  @@index([driverId])
  @@index([status])
}

model VehicleMaintenance {
  id          String   @id @default(cuid())
  vehicleId   String
  type        String   // routine|repair|inspection
  description String
  cost        Int      // in cents
  mileage     Int
  performedBy String
  performedAt DateTime
  nextDue     DateTime?
  notes       String?
  createdAt   DateTime @default(now())

  vehicle     Vehicle  @relation(fields: [vehicleId], references: [id])
  @@index([vehicleId])
  @@index([performedAt])
}

model TrafficAlert {
  id          String   @id @default(cuid())
  severity    String   // low|medium|high|critical
  type        String   // accident|congestion|roadwork|weather
  location    String
  description String
  latitude    Float?
  longitude   Float?
  startTime   DateTime
  endTime     DateTime?
  affectedRoutes String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([severity])
  @@index([startTime])
  @@index([location])
}

// ============================================================================
// SAFETY & COMPLIANCE
// ============================================================================

model SafetyIncident {
  id            String   @id @default(cuid())
  companyId     String
  incidentType  String   // accident|near-miss|violation|equipment-failure
  severity      String   // low|medium|high|critical
  location      String
  description   String   @db.Text
  vehicleId     String?
  driverId      String?
  employeeId    String?
  injuryReported Boolean @default(false)
  damageAmount  Int?     // in cents
  status        String   @default("open") // open|investigating|resolved|closed
  reportedBy    String
  reportedAt    DateTime @default(now())
  resolvedAt    DateTime?
  aiAnalysis    String?  @db.Text
  recommendations String[] 
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([companyId])
  @@index([severity])
  @@index([status])
  @@index([reportedAt])
}

model ComplianceCheck {
  id            String   @id @default(cuid())
  companyId     String
  checkType     String   // ccma|popia|health-safety|transport
  entityId      String   // vehicleId, employeeId, etc.
  entityType    String   // vehicle|employee|facility
  status        String   @default("compliant") // compliant|warning|non-compliant
  details       Json
  checkedAt     DateTime @default(now())
  nextCheckDue  DateTime?
  aiRecommendations String[]
  createdAt     DateTime @default(now())

  @@index([companyId])
  @@index([checkType])
  @@index([status])
  @@index([checkedAt])
}

// ============================================================================
// FINANCIAL & REVENUE
// ============================================================================

model RevenueRecord {
  id          String   @id @default(cuid())
  companyId   String
  source      String   // subscription|transaction-fee|service
  category    String   // procurement|safety|hr|retail
  amount      Int      // in cents
  currency    String   @default("ZAR")
  recordDate  DateTime
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([companyId])
  @@index([source])
  @@index([recordDate])
}

model Expense {
  id          String   @id @default(cuid())
  companyId   String
  category    String   // infrastructure|salaries|marketing|operations
  subcategory String?
  amount      Int      // in cents
  currency    String   @default("ZAR")
  expenseDate DateTime
  description String
  approvedBy  String?
  receipt     String?  // URL to receipt
  status      String   @default("pending") // pending|approved|rejected|paid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([companyId])
  @@index([category])
  @@index([status])
  @@index([expenseDate])
}

// ============================================================================
// ANALYTICS & INSIGHTS
// ============================================================================

model Metric {
  id          String   @id @default(cuid())
  companyId   String
  metricType  String   // revenue|efficiency|safety|satisfaction
  name        String
  value       Float
  unit        String?  // percentage|count|currency|hours
  period      String   // daily|weekly|monthly|quarterly|yearly
  periodStart DateTime
  periodEnd   DateTime
  metadata    Json?
  createdAt   DateTime @default(now())

  @@index([companyId])
  @@index([metricType])
  @@index([periodStart])
}

model AIInsight {
  id              String   @id @default(cuid())
  companyId       String
  insightType     String   // prediction|recommendation|alert|optimization
  category        String   // operations|finance|safety|hr
  title           String
  description     String   @db.Text
  priority        String   @default("medium") // low|medium|high|critical
  confidence      Float    // 0-1
  actionable      Boolean  @default(true)
  actionTaken     Boolean  @default(false)
  impact          String?  // potential impact description
  estimatedValue  Int?     // in cents
  validUntil      DateTime?
  metadata        Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@index([companyId])
  @@index([category])
  @@index([priority])
  @@index([createdAt])
}