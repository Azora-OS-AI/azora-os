// Prisma schema for Azora Coin Service
// Advanced, auditable, and programmable

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  kycStatus    KYCStatus @default(PENDING)
  jurisdiction String?
  riskScore    Int      @default(0)
  createdAt    DateTime @default(now())
  wallet       Wallet?
}

enum KYCStatus {
  PENDING
  VERIFIED
  REJECTED
  SANCTIONED
}

model Wallet {
  id           String   @id @default(cuid())
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  balance      Float    @default(0.0)
  staked       Float    @default(0.0)
  coinType     CoinType @default(AZR)
  createdAt    DateTime @default(now())
  sentTransactions     Transaction[] @relation("Sender")
  receivedTransactions Transaction[] @relation("Recipient")
}

enum CoinType {
  AZR
  BONUS_AZR
  GAS
}

model Transaction {
  id             String    @id @default(cuid())
  type           TxnType
  status         TxnStatus @default(PENDING)
  amount         Float
  coinType       CoinType @default(AZR)
  usdEquivalent  Float
  notes          String?
  originDatumId  String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  senderId       String?
  sender         Wallet?   @relation("Sender", fields: [senderId], references: [id])
  recipientId    String?
  recipient      Wallet?   @relation("Recipient", fields: [recipientId], references: [id])
  aiFlag         Boolean   @default(false)
  aiMetadata     Json?
}

enum TxnType {
  MINT
  BURN
  WITHDRAWAL
  TRANSFER
  STAKE
  UNSTAKE
  REWARD
  GAS
}

enum TxnStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  FLAGGED
}

model AuditLog {
  id          String   @id @default(cuid())
  eventType   String
  details     Json
  createdAt   DateTime @default(now())
  userId      String?
  transactionId String?
}
