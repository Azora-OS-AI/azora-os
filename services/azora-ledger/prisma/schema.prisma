// This is your Prisma schema file.
// Learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Your .env file
}

// User model to handle roles and link to a wallet
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  wallet    Wallet?
}

enum UserRole {
  USER
  ADMIN
  PARTNER
}

// The Wallet holds the user's balance
model Wallet {
  id      String @id @default(cuid())
  userId  String @unique
  user    User   @relation(fields: [userId], references: [id])
  balance Float  @default(0.0) // This is the user's AZR balance

  // Relations to the ledger
  sentTransactions     Transaction[] @relation("Sender")
  receivedTransactions Transaction[] @relation("Recipient")
}

// THIS IS THE CORE LEDGER
// Every change of value is recorded here.
model Transaction {
  id             String    @id @default(cuid())
  type           TxnType // MINT, BURN, WITHDRAWAL, TRANSFER
  status         TxnStatus @default(PENDING)
  amount         Float // Amount of AZR
  usdEquivalent  Float // Should always == amount if 1:1
  notes          String?
  externalTxnId  String? // e.g., Stripe Charge ID, USDC Txn Hash
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  // Relations
  senderId    String?
  sender      Wallet? @relation("Sender", fields: [senderId], references: [id])
  
  recipientId String?
  recipient   Wallet? @relation("Recipient", fields: [recipientId], references: [id])
}

enum TxnType {
  MINT       // Creating new AZR (e.g., user deposits $1)
  BURN       // Destroying AZR (e.g., admin correction)
  WITHDRAWAL // Redeeming AZR for $1 (user withdraws)
  TRANSFER   // Peer-to-peer transfer
}

enum TxnStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
