{
  "name": "azora-os",
<<<<<<< HEAD
  "version": "1.0.0",
  "description": "AZORA OS - Planetary-scale intelligence ecosystem",
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "format:fix": "prettier --write \"**/*.{ts,tsx,js,jsx,json,css,md}\"",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:ci": "jest --ci --coverage --watchAll=false",
    "test:e2e": "playwright test",
    "test:e2e:ui": "playwright test --ui",
    "license-check": "find . -name '*.ts' -o -name '*.js' | grep -v node_modules | grep -v .next | xargs -I {} sh -c 'if ! head -n 10 \"{}\" | grep -q \"AZORA PROPRIETARY LICENSE\"; then echo \"Missing license in {}\"; exit 1; fi'",
    "elara:supreme": "tsx run-azora-supreme.ts",
    "elara:test": "tsx genome/test-elara-supreme.ts",
    "elara:deity": "tsx genome/test-elara.ts",
    "elara:bio": "tsx genome/test-biological-intelligence.ts",
    "elara:email": "tsx genome/test-email-outreach.ts",
    "elara:pro-emails": "tsx genome/test-professional-emails.ts",
    "health:check": "tsx system-health-check.ts",
    "deploy:check": "npm run health:check && npm run lint && npm run test:ci && npm run build:all",
    "build:all": "npm run build && npx tsc --noEmit",
    "test:all": "tsx scripts/test-all-systems.ts",
    "pok:test": "tsx scripts/test-pok-mvp.ts",
    "pok:api": "tsx services/pok-api.ts",
    "ubo:distribute": "tsx scripts/distribute-ubo.ts",
    "heal:test": "tsx scripts/test-self-healing.ts",
    "founders:onboard": "tsx scripts/onboard-founders.ts",
    "founders:api": "tsx services/founder-onboarding-api.ts",
    "organism:awaken": "tsx scripts/awaken-organism.ts",
    "africa:solutions": "tsx scripts/test-african-solutions.ts",
    "africa:launch": "node scripts/africa-launch.js",
    "africa:metrics": "tsx scripts/monitor-african-impact.ts",
    "repo:clean": "node scripts/clean-repo.js",
    "launch:prepare": "node scripts/launch-preparation.js",
    "deploy:africa": "tsx scripts/deploy-african-infrastructure.ts",
    "elara:inspire": "tsx genome/elara-inspire-me.ts",
    "ambient:demo": "tsx demo-ambient-intelligence-simple.ts",
    "universal:demo": "tsx demo-universal-infrastructure-simple.ts",
    "neural:demo": "tsx demo-neural-link.ts",
    "temporal:demo": "tsx demo-temporal-prediction.ts",
    "test:supabase": "tsx scripts/test-supabase.ts",
    "db:setup": "echo Run supabase/schema.sql in your Supabase dashboard",
    "api:start": "tsx api/production-server.ts",
    "api:dev": "tsx --watch api/production-server.ts",
    "mint:test": "node test-withdrawal.cjs",
    "money:demo": "node scripts/money-system-demo.js",
    "deploy:production": "vercel --prod",
    "deploy:preview": "vercel",
    "automate:all": "tsx scripts/full-system-automation.ts",
    "integrate:services": "tsx scripts/full-system-automation.ts",
    "orchestrator:start": "tsx azora-os-orchestrator.ts",
    "system:status": "tsx -e \"import { azoraOSOrchestrator } from './azora-os-orchestrator.ts'; azoraOSOrchestrator.getSystemStatus().then(status => console.log(JSON.stringify(status, null, 2)));\"",
    "upgrade:check": "tsx -e \"import { upgradeManager } from './system-upgrade/upgrade-manager.ts'; upgradeManager.forceUpgradeCheck().then(result => console.log('Upgrade check completed:', result.upgradesAvailable, 'available'));\"",
    "upgrade:apply": "tsx -e \"import { upgradeManager } from './system-upgrade/upgrade-manager.ts'; upgradeManager.checkForUpgrades().then(result => upgradeManager.applyUpgrades(result.available)).then(applied => console.log('Applied', applied.length, 'upgrades'));\"",
    "git:commit": "tsx -e \"import { gitManager } from './git-automation/git-manager.ts'; gitManager.commitAndPush(process.argv[2] || 'System update').then(result => console.log('Commit result:', result));\"",
    "git:status": "tsx -e \"import { gitManager } from './git-automation/git-manager.ts'; gitManager.getGitStatus().then(status => console.log(JSON.stringify(status, null, 2)));\"",
    "elara:family:status": "tsx -e \"import { elaraFamilyCoordinator } from './elara-family/core/family-coordinator.ts'; elaraFamilyCoordinator.getFamilyStatus().then(status => console.log(JSON.stringify(status, null, 2)));\"",
    "elara:ide:start": "tsx -e \"import { elaraIDE } from './elara-ide/core/elara-ide-core.ts'; elaraIDE(process.cwd()).then(ide => ide.initialize()).then(() => console.log('Elara IDE initialized'));\"",
    "integration:full": "tsx scripts/full-system-integration.ts",
    "integration:check": "tsx -e \"import { runFullSystemIntegration } from './scripts/full-system-integration.ts'; runFullSystemIntegration().then(report => { console.log('Integration Status:', report.success ? '✅ SUCCESS' : '❌ FAILED'); console.log('Duration:', report.duration + 'ms'); console.log('Phases:', report.summary.successfulPhases + '/' + report.summary.totalPhases); if (!report.success) { console.log('Failed phases:'); report.phases.filter(p => !p.success).forEach(p => console.log(' -', p.phase)); } });\"",
    "services:upgrade": "tsx scripts/execute-service-upgrades.ts",
    "services:upgrade:check": "tsx -e \"import { serviceUpgradeOrchestrator } from './services-upgrade/service-upgrade-orchestrator.ts'; serviceUpgradeOrchestrator.executeServiceUpgrades().then(report => { console.log('Upgrade Status:', report.success ? '✅ SUCCESS' : '❌ FAILED'); console.log('Services:', report.successfulUpgrades + '/' + report.totalServices); });\"",
    "build:exe": "build-exe-for-testing.bat",
    "build:exe:ts": "tsx scripts/build-test-executables.ts",
    "find:exe": "tsx scripts/find-executables.ts",
    "research:ingest": "tsx scripts/research-ingestion.ts",
    "funding:report": "tsx scripts/funding-report.ts",
    "withdraw:now": "tsx scripts/withdraw-now.ts",
    "cards:start": "tsx services/virtual-cards/server.ts",
    "research:auto": "tsx scripts/continuous-research-orchestrator.ts",
    "deploy:all": "tsx deploy-all-platforms.ts",
    "deploy:vercel": "vercel --prod",
    "deploy:docker": "docker-compose -f vessels/docker-compose.production.yml up -d --build",
    "deploy:k8s": "kubectl apply -f infrastructure/k8s/ && kubectl apply -f biome/",
    "deploy:platforms": "node build-all-platforms.js",
    "monitor:integration": "tsx scripts/continuous-integration-monitor.ts",
    "monitor:start": "npm run monitor:integration",
    "status:integration": "tsx -e \"import { monitor } from './scripts/continuous-integration-monitor.ts'; console.log(JSON.stringify(monitor.getStatus(), null, 2));\""
  },
  "dependencies": {
    "@hookform/resolvers": "^5.2.2",
    "@langchain/anthropic": "^0.3.33",
    "@langchain/community": "^1.0.0",
    "@langchain/core": "^1.0.2",
    "@langchain/openai": "^1.0.0",
    "@prisma/client": "^6.18.0",
    "@radix-ui/react-accordion": "^1.2.12",
    "@radix-ui/react-alert-dialog": "^1.1.15",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.3",
    "@radix-ui/react-collapsible": "^1.1.12",
    "@radix-ui/react-context-menu": "^2.2.16",
    "@radix-ui/react-dialog": "^1.1.15",
    "@radix-ui/react-dropdown-menu": "^2.1.16",
    "@radix-ui/react-hover-card": "^1.1.15",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.16",
    "@radix-ui/react-navigation-menu": "^1.2.14",
    "@radix-ui/react-popover": "^1.1.15",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.8",
    "@radix-ui/react-scroll-area": "^1.2.10",
    "@radix-ui/react-select": "^2.2.6",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.6",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.6",
    "@radix-ui/react-tabs": "^1.1.13",
    "@radix-ui/react-toast": "^1.2.15",
    "@radix-ui/react-toggle": "^1.1.10",
    "@radix-ui/react-toggle-group": "^1.1.11",
    "@radix-ui/react-tooltip": "^1.2.8",
    "@react-three/drei": "^10.7.6",
    "@react-three/fiber": "^9.4.0",
    "@supabase/supabase-js": "^2.78.0",
    "@tanstack/react-query": "^5.90.5",
    "@tanstack/react-table": "^8.21.3",
    "@tensorflow/tfjs": "^4.22.0",
    "@tensorflow/tfjs-node": "^4.22.0",
    "@types/pg": "^8.15.6",
    "@vercel/analytics": "^1.5.0",
    "aos": "^2.3.4",
    "archiver": "^7.0.1",
    "autoprefixer": "^10.4.21",
    "axios": "^1.13.1",
    "bullmq": "^5.63.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "date-fns": "^4.1.0",
    "dotenv": "^17.2.3",
    "embla-carousel-react": "^8.6.0",
    "express": "^5.1.0",
    "express-actuator": "^1.8.4",
    "express-rate-limit": "^8.2.0",
    "express-slow-down": "^3.0.0",
    "express-validator": "^7.3.0",
    "framer-motion": "^12.23.24",
    "fs-extra": "^11.3.2",
    "glob": "^11.0.3",
    "helmet": "^8.1.0",
    "http-proxy-middleware": "^3.0.5",
    "input-otp": "^1.4.2",
    "ioredis": "^5.8.2",
    "jsonwebtoken": "^9.0.2",
    "langchain": "^1.0.2",
    "lottie-react": "^2.4.1",
    "lucide-react": "^0.552.0",
    "mongoose": "^8.19.2",
    "next": "^16.0.1",
    "next-themes": "^0.4.6",
    "openai": "^6.7.0",
    "opossum": "^9.0.0",
    "pg": "^8.16.3",
    "prom-client": "^15.1.3",
    "prometheus-api-metrics": "^4.0.0",
    "rate-limiter-flexible": "^8.1.0",
    "react": "^19.2.0",
    "react-confetti": "^6.4.0",
    "react-countup": "^6.5.3",
    "react-day-picker": "^9.11.1",
    "react-dom": "^19.2.0",
    "react-helmet-async": "^2.0.5",
    "react-hook-form": "^7.65.0",
    "react-hotkeys-hook": "^5.2.1",
    "react-intersection-observer": "^10.0.0",
    "react-parallax-tilt": "^1.7.311",
    "react-particles": "^2.12.2",
    "react-resizable-panels": "^3.0.6",
    "react-reveal": "^1.2.2",
    "react-speech-kit": "^3.0.1",
    "react-tilt": "^1.0.2",
    "react-typed": "^2.0.12",
    "react-use": "^17.6.0",
    "react-use-gesture": "^9.1.3",
    "recharts": "^3.3.0",
    "response-time": "^2.3.4",
    "sonner": "^2.0.7",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "tailwind-merge": "^3.3.1",
    "tailwindcss-animate": "^1.0.7",
    "three": "^0.181.0",
    "tsparticles": "^3.9.1",
    "use-sound": "^5.0.0",
    "vaul": "^1.1.2",
    "web-vitals": "^5.1.0",
    "winston": "^3.18.3",
    "workbox-webpack-plugin": "^7.3.0",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@nomicfoundation/hardhat-chai-matchers": "^2.1.0",
    "@nomicfoundation/hardhat-ethers": "^4.0.2",
    "@nomicfoundation/hardhat-network-helpers": "^3.0.1",
    "@nomicfoundation/hardhat-toolbox": "^6.1.0",
    "@nomicfoundation/hardhat-verify": "^3.0.4",
    "@safe-global/api-kit": "^4.0.0",
    "@safe-global/protocol-kit": "^6.1.1",
    "@safe-global/relay-kit": "^4.1.0",
    "@safe-global/safe-core-sdk-types": "^5.1.0",
    "@safe-global/safe-ethers-lib": "^1.9.4",
    "@safe-global/safe-service-client": "^2.0.3",
    "@tailwindcss/postcss": "^4.1.16",
    "@typechain/ethers-v6": "^0.5.1",
    "@typechain/hardhat": "^9.1.0",
    "@types/bcryptjs": "^3.0.0",
    "@types/chai": "^5.2.3",
    "@types/compression": "^1.7.5",
    "@types/cors": "^2.8.17",
    "@types/express": "^5.0.0",
    "@types/express-actuator": "^1.8.4",
    "@types/fs-extra": "^11.0.4",
    "@types/jest": "^29.5.14",
    "@types/jsonwebtoken": "^9.0.7",
    "@types/node": "^22.10.10",
    "@types/pg": "^8.11.10",
    "@types/react": "^19.0.1",
    "@types/react-dom": "^19.0.2",
    "@types/response-time": "^2.3.8",
    "@types/supertest": "^6.0.2",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.7",
    "@types/three": "^0.181.0",
    "@typescript-eslint/eslint-plugin": "^8.20.0",
    "@typescript-eslint/parser": "^8.20.0",
    "autoprefixer": "^10.4.21",
    "babel-jest": "^29.7.0",
    "bcryptjs": "^2.4.3",
    "chai": "^5.1.2",
    "eslint": "^9.18.0",
    "eslint-config-next": "^16.0.1",
    "eslint-config-prettier": "^9.1.0",
    "hardhat": "^2.22.17",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "playwright": "^1.50.1",
    "postcss": "^8.5.11",
    "prettier": "^3.4.2",
    "prettier-plugin-tailwindcss": "^0.6.9",
    "supertest": "^7.0.0",
    "tailwindcss": "^4.1.16",
    "ts-jest": "^29.2.5",
    "ts-node": "^10.9.2",
    "tsx": "^4.19.2",
    "typechain": "^8.3.2",
    "typescript": "^5.7.3"
  },
  "engines": {
    "node": ">=22.0.0",
    "npm": ">=10.0.0"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/azora-es/azora-os.git"
  },
  "keywords": [
    "ai",
    "os",
    "education",
    "finance",
    "blockchain",
    "decentralized",
    "elara",
    "quantum"
  ],
  "author": "Azora ES (Pty) Ltd",
  "license": "SEE LICENSE IN LICENSE",
  "bugs": {
    "url": "https://github.com/azora-es/azora-os/issues"
  },
  "homepage": "https://azora.world",
  "private": true
=======
  "private": true,
  "workspaces": [
    "services/*",
    "organs/*",
    "ui/*",
    "synapse/*",
    "infrastructure/*"
  ],
  "type": "module",
  "scripts": {
    "build": "./node_modules/.bin/vite build",
    "test": "npx jest",
    "lint": "npx eslint .",
    "format": "npx prettier --write .",
    "clean": "find . -name 'node_modules' -type d -prune -exec rm -rf '{}' +",
    "prepare": "husky install"
  },
  "devDependencies": {
    "@types/node": "^20.14.2",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "eslint": "^9.0.0",
    "husky": "^8.0.0",
    "jest": "^29.0.0",
    "lint-staged": "^13.0.0",
    "prettier": "^2.0.0",
    "typescript": "^5.0.0",
    "vite": "^4.0.0"
  },
  "lint-staged": {
    "*.{js,jsx,ts,tsx}": [
      "eslint --fix",
      "prettier --write"
    ]
  },
  "dependencies": {}
>>>>>>> ac5f76a5792fcea07aa230fead32b6d122524c55
}
