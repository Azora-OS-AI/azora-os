version: '3.8'

services:
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - azora-network

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=azora_db
      - POSTGRES_USER=azora_admin
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-secure_password_change_me}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U azora_admin"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - azora-network

  mongodb:
    image: mongo:7
    environment:
      - MONGO_INITDB_ROOT_USERNAME=azora
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-secure_mongo_password}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - azora-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=production
      - VITE_API_URL=${API_URL:-http://localhost:4000}
    depends_on:
      - ai-orchestrator
    networks:
      - azora-network

  ai-orchestrator:
    build:
      context: ./services/ai-orchestrator
    ports:
      - "4001:4001"
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - DATABASE_URL=postgresql://azora_admin:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/azora_db
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - azora-network

volumes:
  redis_data:
  postgres_data:
  mongo_data:

networks:
  azora-network:
    driver: bridge
