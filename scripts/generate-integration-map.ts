/**
 * @file generate-integration-map.ts
 * @description Automatically scans codebase and generates integration documentation
 * @author Azora OS Team
 * @compliance NO_CODE_LEFT_BEHIND Act
 */

import * as fs from 'fs';
import * as path from 'path';
import { execSync } from 'child_process';

interface FileIntegration {
  filepath: string;
  type: string;
  imports: string[];
  exports: string[];
  dependencies: string[];
  consumedBy: string[];
  apiCalls: string[];
  envVars: string[];
}

class IntegrationMapper {
  private integrations: Map<string, FileIntegration> = new Map();
  
  async scanRepository(rootDir: string): Promise<void> {
    console.log('üîç Scanning repository for integrations...\n');
    
    const files = this.getAllCodeFiles(rootDir);
    
    for (const file of files) {
      const integration = await this.analyzeFile(file);
      this.integrations.set(file, integration);
    }
    
    console.log(`‚úÖ Scanned ${files.length} files\n`);
  }
  
  private getAllCodeFiles(dir: string): string[] {
    try {
      const output = execSync(
        `find ${dir} -type f \\( -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" \\) ! -path "*/node_modules/*" ! -path "*/dist/*"`,
        { encoding: 'utf-8' }
      );
      return output.trim().split('\n').filter(Boolean);
    } catch (error) {
      console.error('Error scanning files:', error);
      return [];
    }
  }
  
  private async analyzeFile(filepath: string): Promise<FileIntegration> {
    const content = fs.readFileSync(filepath, 'utf-8');
    
    return {
      filepath,
      type: this.getFileType(filepath),
      imports: this.extractImports(content),
      exports: this.extractExports(content),
      dependencies: this.extractDependencies(content),
      consumedBy: [], // Populated in second pass
      apiCalls: this.extractApiCalls(content),
      envVars: this.extractEnvVars(content)
    };
  }
  
  private getFileType(filepath: string): string {
    if (filepath.includes('/pages/')) return 'Page Component';
    if (filepath.includes('/components/')) return 'UI Component';
    if (filepath.includes('/services/')) return 'Service';
    if (filepath.includes('/hooks/')) return 'React Hook';
    if (filepath.includes('/utils/')) return 'Utility';
    if (filepath.includes('/types/')) return 'Type Definition';
    return 'Unknown';
  }
  
  private extractImports(content: string): string[] {
    const importRegex = /import\s+.*?\s+from\s+['"]([^'"]+)['"]/g;
    const imports: string[] = [];
    let match;
    
    while ((match = importRegex.exec(content)) !== null) {
      imports.push(match[1]);
    }
    
    return [...new Set(imports)];
  }
  
  private extractExports(content: string): string[] {
    const exports: string[] = [];
    
    if (content.includes('export default')) {
      const defaultExport = content.match(/export default (?:function |class )?(\w+)/);
      if (defaultExport) exports.push(defaultExport[1]);
    }
    
    const namedExports = content.matchAll(/export (?:const|function|class) (\w+)/g);
    for (const match of namedExports) {
      exports.push(match[1]);
    }
    
    return exports;
  }
  
  private extractDependencies(content: string): string[] {
    const deps: string[] = [];
    
    // Check for service worker registration
    if (content.includes('serviceWorker.register')) {
      deps.push('/public/sw.js');
    }
    
    // Check for manifest
    if (content.includes('manifest.json')) {
      deps.push('/public/manifest.json');
    }
    
    return deps;
  }
  
  private extractApiCalls(content: string): string[] {
    const apiCalls: string[] = [];
    const fetchRegex = /fetch\(['"`]([^'"`]+)['"`]/g;
    let match;
    
    while ((match = fetchRegex.exec(content)) !== null) {
      apiCalls.push(match[1]);
    }
    
    return apiCalls;
  }
  
  private extractEnvVars(content: string): string[] {
    const envVars: string[] = [];
    const envRegex = /import\.meta\.env\.(\w+)|process\.env\.(\w+)/g;
    let match;
    
    while ((match = envRegex.exec(content)) !== null) {
      envVars.push(match[1] || match[2]);
    }
    
    return [...new Set(envVars)];
  }
  
  generateMarkdown(): string {
    let md = '# üîó AZORA OS - COMPLETE INTEGRATION MAP\n\n';
    md += '*Auto-generated by integration mapper*\n\n';
    md += '---\n\n';
    
    for (const [filepath, integration] of this.integrations) {
      md += `## ${filepath}\n\n`;
      md += `**Type:** ${integration.type}\n\n`;
      
      if (integration.imports.length > 0) {
        md += '**Imports:**\n';
        integration.imports.forEach(imp => md += `- \`${imp}\`\n`);
        md += '\n';
      }
      
      if (integration.exports.length > 0) {
        md += '**Exports:**\n';
        integration.exports.forEach(exp => md += `- \`${exp}\`\n`);
        md += '\n';
      }
      
      if (integration.dependencies.length > 0) {
        md += '**Dependencies:**\n';
        integration.dependencies.forEach(dep => md += `- \`${dep}\`\n`);
        md += '\n';
      }
      
      if (integration.apiCalls.length > 0) {
        md += '**API Calls:**\n';
        integration.apiCalls.forEach(api => md += `- \`${api}\`\n`);
        md += '\n';
      }
      
      if (integration.envVars.length > 0) {
        md += '**Environment Variables:**\n';
        integration.envVars.forEach(env => md += `- \`${env}\`\n`);
        md += '\n';
      }
      
      md += '---\n\n';
    }
    
    return md;
  }
  
  generateJSON(): string {
    return JSON.stringify(
      Array.from(this.integrations.values()),
      null,
      2
    );
  }
}

// Execute if run directly
if (require.main === module) {
  (async () => {
    const mapper = new IntegrationMapper();
    await mapper.scanRepository('/workspaces/azora-os');
    
    // Write Markdown
    const markdown = mapper.generateMarkdown();
    fs.writeFileSync(
      '/workspaces/azora-os/docs/integration/INTEGRATION_MAP.md',
      markdown
    );
    
    // Write JSON
    const json = mapper.generateJSON();
    fs.writeFileSync(
      '/workspaces/azora-os/docs/integration/integration-map.json',
      json
    );
    
    console.log('‚úÖ Integration map generated!');
    console.log('üìÑ Markdown: docs/integration/INTEGRATION_MAP.md');
    console.log('üìÑ JSON: docs/integration/integration-map.json');
  })();
}

export default IntegrationMapper;